const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const schedule = require('node-schedule');
const axios = require('axios');

// Configuration
const CONFIG = {
  token: '7268248925:AAHmWrNJvOWIsq1SroDGX_Awro7pWDHWcuI',
  groupChatId: '-1002543988238',
  logFile: path.join(__dirname, 'bot_logs.txt'),
  dataDir: path.join(__dirname, 'data'),
  usersFile: path.join(__dirname, 'data', 'users.json'),
  settingsFile: path.join(__dirname, 'data', 'settings.json'),
  announcementsFile: path.join(__dirname, 'data', 'announcements.json'),
  statsFile: path.join(__dirname, 'data', 'stats.json'),
  backupInterval: '0 0 * * *', // Daily at midnight
};

// Ensure data directory exists
if (!fs.existsSync(CONFIG.dataDir)) {
  fs.mkdirSync(CONFIG.dataDir, { recursive: true });
}

// Role permissions (higher numbers include all lower permissions)
const PERMISSIONS = {
  owner: 100,
  'tech.admin': 90,
  director: 80,
  admin: 70,
  moderator: 50,
  premium: 20,
  user: 10,
  blocked: 0,
};

// Command permissions requirements
const COMMAND_PERMISSIONS = {
  '/test': 70,           // Admin or higher
  '/announce': 70,       // Admin or higher
  '/stats': 50,          // Moderator or higher
  '/adduser': 90,        // Tech.admin or higher
  '/removeuser': 90,     // Tech.admin or higher
  '/changerole': 90,     // Tech.admin or higher
  '/listusers': 70,      // Admin or higher
  '/broadcast': 80,      // Director or higher
  '/settings': 100,      // Owner only
  '/ban': 70,            // Admin or higher
  '/unban': 70,          // Admin or higher
  '/backup': 90,         // Tech.admin or higher
  '/restore': 100,       // Owner only
  '/schedule': 80,       // Director or higher
  '/cancel_schedule': 80,// Director or higher
  '/logs': 90,           // Tech.admin or higher
  '/help': 10,           // All registered users
  '/premium': 20,        // Premium users or higher
};

// Help texts for different permission levels
const HELP_TEXTS = {
    10: `üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:
  ‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  ‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  ‚Ä¢ /request <i>–≤–∞—à –∑–∞–ø—Ä–æ—Å</i> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`,
  
    20: `üìö <b>–ü—Ä–µ–º–∏—É–º-–∫–æ–º–∞–Ω–¥—ã</b>:
  ‚Ä¢ /premium - –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º
  ‚Ä¢ /customstatus <i>–≤–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å</i> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å`,
  
    50: `üìö <b>–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>:
  ‚Ä¢ /stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
  ‚Ä¢ /warn <i>@username</i> <i>–ø—Ä–∏—á–∏–Ω–∞</i> - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ‚Ä¢ /mute <i>@username</i> <i>–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</i> <i>–ø—Ä–∏—á–∏–Ω–∞</i> - –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ‚Ä¢ /unmute <i>@username</i> - –í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
  
  70: `üìö <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>:
  ‚Ä¢ /test <i>—Ç–≤–æ–π —Ç–µ–∫—Å—Ç</i> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ
  ‚Ä¢ /announce <i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i> - –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  ‚Ä¢ /listusers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  ‚Ä¢ /ban <i>@userId</i> <i>–ø—Ä–∏—á–∏–Ω–∞</i> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ‚Ä¢ /unban <i>@userId</i> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,  
  
    80: `üìö <b>Director Commands</b>:
  ‚Ä¢ /broadcast <i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  ‚Ä¢ /schedule <i>time</i> <i>command</i> - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
  ‚Ä¢ /cancel_schedule <i>id</i> - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É`,
  
    90: `üìö <b>Tech Admin Commands</b>:
  ‚Ä¢ /adduser <i>userId</i> <i>role</i> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ‚Ä¢ /removeuser <i>userId</i> - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ‚Ä¢ /changerole <i>userId</i> <i>newRole</i> - –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ‚Ä¢ /backup - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
  ‚Ä¢ /logs <i>lines</i> - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤`,
  
    100: `üìö <b>–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞</b>:
  ‚Ä¢ /restore <i>filename</i> - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏`,
  };  

// Initialize or load users data
let users = {
  '6924074231': { role: 'owner', name: 'Mark Travmatov', joinDate: new Date().toISOString() },
  '1234567890': { role: 'tech.admin', name: 'Svyatoslav Travmatov', joinDate: new Date().toISOString() },
  '342432': { role: 'admin', name: 'Administrator', joinDate: new Date().toISOString() },
  '3123': { role: 'director', name: 'Director FBI', joinDate: new Date().toISOString() }
};

// Load users if file exists
if (fs.existsSync(CONFIG.usersFile)) {
  try {
    users = JSON.parse(fs.readFileSync(CONFIG.usersFile, 'utf8'));
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.: ${error.message}`);
  }
} else {
  // Create initial users file
  saveUsers();
}

// Initialize or load settings
let settings = {
  welcomeMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É!',
  notificationEnabled: true,
  maintenanceMode: false,
  maxWarnings: 3,
  muteDuration: 3600, // 1 hour in seconds
  language: 'ru',
  lastModified: new Date().toISOString()
};

// Load settings if file exists
if (fs.existsSync(CONFIG.settingsFile)) {
  try {
    settings = JSON.parse(fs.readFileSync(CONFIG.settingsFile, 'utf8'));
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${error.message}`);
  }
} else {
  // Create initial settings file
  saveSettings();
}

// Initialize stats
let stats = {
  startDate: new Date().toISOString(),
  commandsProcessed: 0,
  activeUsers: 0,
  messagesSent: 0,
  errorCount: 0,
  lastReset: new Date().toISOString(),
};

// Load stats if file exists
if (fs.existsSync(CONFIG.statsFile)) {
  try {
    stats = JSON.parse(fs.readFileSync(CONFIG.statsFile, 'utf8'));
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${error.message}`);
  }
} else {
  saveStats();
}

// Initialize scheduled announcements
let scheduledTasks = {};

// Create bot with polling
const bot = new TelegramBot(CONFIG.token, { polling: true });

// Save functions
function saveUsers() {
  try {
    fs.writeFileSync(CONFIG.usersFile, JSON.stringify(users, null, 2));
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.: ${error.message}`);
  }
}

function saveSettings() {
  try {
    settings.lastModified = new Date().toISOString();
    fs.writeFileSync(CONFIG.settingsFile, JSON.stringify(settings, null, 2));
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.: ${error.message}`);
  }
}

function saveStats() {
  try {
    fs.writeFileSync(CONFIG.statsFile, JSON.stringify(stats, null, 2));
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${error.message}`);
  }
}

// Logging functions
function logMessage(message) {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] –ò–ù–§–û–†–ú–ê–¶–ò–Ø: ${message}\n`;
  fs.appendFileSync(CONFIG.logFile, logEntry);
  console.log(`–ò–ù–§–û–†–ú–ê–¶–ò–Ø: ${message}`);
}

function logError(message) {
  const timestamp = new Date().toISOString();
  const logEntry = `[${timestamp}] –û–®–ò–ë–ö–ê: ${message}\n`;
  fs.appendFileSync(CONFIG.logFile, logEntry);
  console.error(`–û–®–ò–ë–ö–ê: ${message}`);
  stats.errorCount++;
  saveStats();
}

// Helper functions
function getUserRole(userId) {
  return users[userId] ? users[userId].role : 'guest';
}

function getUserPermissionLevel(userId) {
  const role = getUserRole(userId);
  return PERMISSIONS[role] || 0;
}

function canExecuteCommand(userId, command) {
  const userPermissionLevel = getUserPermissionLevel(userId);
  const requiredPermissionLevel = COMMAND_PERMISSIONS[command] || 0;
  return userPermissionLevel >= requiredPermissionLevel;
}

function getUserName(userId) {
  return users[userId] ? users[userId].name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
}

function formatDate(date) {
  return new Date(date).toLocaleString('ru-RU');
}

function createBackup() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupDir = path.join(CONFIG.dataDir, 'backups');
  
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  const backupFile = path.join(backupDir, `backup_${timestamp}.json`);
  
  const backupData = {
    users,
    settings,
    stats,
    timestamp,
  };
  
  try {
    fs.writeFileSync(backupFile, JSON.stringify(backupData, null, 2));
    logMessage(`Backup created: ${backupFile}`);
    return backupFile;
  } catch (error) {
    logError(`Failed to create backup: ${error.message}`);
    return null;
  }
}

// Command handlers
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userRole = getUserRole(userId);

  // Update stats
  stats.activeUsers++;
  stats.commandsProcessed++;
  saveStats();

  // Log the start command
  logMessage(`User ${userId} (${getUserName(userId)}) started the bot`);

  // Check if maintenance mode is on for non-admins
  if (settings.maintenanceMode && getUserPermissionLevel(userId) < PERMISSIONS.admin) {
    bot.sendMessage(chatId, 'üõ† –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  // Generate greeting based on user role
  let greeting;
  
  if (userRole === 'guest') {
    greeting = `${settings.welcomeMessage}\n\n–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n@sakurariley - tech.admin\n@JUMBO196 - tech.admin`;
    
    // Create a temporary user if they don't exist
    if (!users[userId]) {
      users[userId] = {
        role: 'guest',
        name: msg.from.username ? msg.from.username : `Guest_${userId.substring(0, 5)}`,
        joinDate: new Date().toISOString()
      };
      saveUsers();
    }
  } else {
    const permissionLevel = getUserPermissionLevel(userId);
    
    // Get help text for the user's permission level
    let helpText = '';
    Object.keys(HELP_TEXTS)
      .filter(level => level <= permissionLevel)
      .sort((a, b) => a - b)
      .forEach(level => {
        helpText += HELP_TEXTS[level] + '\n\n';
      });
    
    greeting = `üëã <b>–ü—Ä–∏–≤–µ—Ç, ${getUserName(userId)}!</b>\n\n`;
    greeting += `üîë –í–∞—à–∞ —Ä–æ–ª—å: <b>${userRole}</b>\n`;
    greeting += `üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${formatDate(users[userId].joinDate)}\n\n`;
    greeting += `${helpText}`;
  }

  bot.sendMessage(chatId, greeting, { parse_mode: 'HTML' });
});

// Command to send messages to the group
bot.onText(/\/test (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const messageToSend = match[1];

  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission to run this command
  if (!canExecuteCommand(userId, '/test')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return;
  }

  const userName = msg.from.username ? `@${msg.from.username}` : getUserName(userId);
  const userRole = getUserRole(userId);
  
  // Format message based on user role
  let roleEmoji;
  switch (userRole) {
    case 'owner':
      roleEmoji = 'üëë';
      break;
    case 'tech.admin':
      roleEmoji = '‚öôÔ∏è';
      break;
    case 'director':
      roleEmoji = 'üî±';
      break;
    case 'admin':
      roleEmoji = 'üõ°Ô∏è';
      break;
    default:
      roleEmoji = 'üì¢';
  }

  const formattedMessage = `${roleEmoji} <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userRole}</b> ${userName}\n\n${messageToSend}`;

  // Send message to the group
  bot.sendMessage(CONFIG.groupChatId, formattedMessage, { parse_mode: 'HTML' })
    .then(() => {
      bot.sendMessage(chatId, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!');
      stats.messagesSent++;
      saveStats();
      logMessage(`User ${userId} (${getUserName(userId)}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: ${messageToSend.substring(0, 50)}...`);
    })
    .catch(error => {
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
      logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: ${error.message}`);
    });
});

// Help command
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const permissionLevel = getUserPermissionLevel(userId);
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Get help text for the user's permission level
  let helpText = '';
  Object.keys(HELP_TEXTS)
    .filter(level => level <= permissionLevel)
    .sort((a, b) => a - b)
    .forEach(level => {
      helpText += HELP_TEXTS[level] + '\n\n';
    });
  
  bot.sendMessage(chatId, helpText, { parse_mode: 'HTML' });
});

// Request command for users to contact admins
bot.onText(/\/request (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const requestText = match[1];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Send request to all admins
  Object.entries(users).forEach(([adminId, user]) => {
    if (getUserPermissionLevel(adminId) >= PERMISSIONS.admin) {
      const requestMessage = `üì® <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n` +
        `<b>–û—Ç:</b> ${getUserName(userId)} (ID: ${userId})\n` +
        `<b>–¢–µ–∫—Å—Ç:</b> ${requestText}\n\n` + 
        `–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n` +
        `/reply ${userId} –í–∞—à –æ—Ç–≤–µ—Ç`;
      
      bot.sendMessage(adminId, requestMessage, { parse_mode: 'HTML' })
        .catch(() => logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${adminId}`));
    }
  });
  
  bot.sendMessage(chatId, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.');
  logMessage(`User ${userId} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: ${requestText.substring(0, 50)}...`);
});

// Reply to user requests
bot.onText(/\/reply (\d+) (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const targetUserId = match[1];
  const replyText = match[2];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission to reply (admin or higher)
  if (getUserPermissionLevel(userId) < PERMISSIONS.admin) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã.');
    return;
  }
  
  // Send reply to the user
  const replyMessage = `üì© <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n` +
    `<b>–û—Ç:</b> ${getUserName(userId)}\n` +
    `<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ${replyText}`;
  
  bot.sendMessage(targetUserId, replyMessage, { parse_mode: 'HTML' })
    .then(() => {
      bot.sendMessage(chatId, `‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${getUserName(targetUserId)}.`);
      stats.messagesSent++;
      saveStats();
    })
    .catch(error => {
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      logError(`Failed to send reply to ${targetUserId}: ${error.message}`);
    });
});

// Make announcements
bot.onText(/\/announce (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const announcement = match[1];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/announce')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π.');
    return;
  }
  
  const userName = getUserName(userId);
  const announcementMessage = `üì£ <b>–û–ë–™–Ø–í–õ–ï–ù–ò–ï</b> üì£\n\n${announcement}\n\n<i>–û—Ç: ${userName}</i>`;
  
  // Send to the group
  bot.sendMessage(CONFIG.groupChatId, announcementMessage, { 
    parse_mode: 'HTML',
    disable_notification: false
  })
    .then(() => {
      bot.sendMessage(chatId, '‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!');
      stats.messagesSent++;
      saveStats();
      logMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) —Å–¥–µ–ª–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ`);
    })
    .catch(error => {
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: ${error.message}`);
      logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç ${userId}: ${error.message}`);
    });
});

// User management commands
bot.onText(/\/adduser (\d+) (\w+) (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const newUserId = match[1];
  const newUserRole = match[2];
  const newUserName = match[3];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/adduser')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    return;
  }
  
  // Validate role
  if (!PERMISSIONS.hasOwnProperty(newUserRole)) {
    bot.sendMessage(chatId, `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: ${Object.keys(PERMISSIONS).join(', ')}`);
    return;
  }
  
  // Don't allow creating users with higher permission level than the creator
  if (PERMISSIONS[newUserRole] > getUserPermissionLevel(userId)) {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –≤—ã—à–µ –≤–∞—à–µ–π.');
    return;
  }
  
  // Add the new user
  users[newUserId] = {
    role: newUserRole,
    name: newUserName,
    joinDate: new Date().toISOString(),
    addedBy: userId
  };
  
  saveUsers();
  bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUserName} (ID: ${newUserId}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é ${newUserRole}.`);
  logMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUserId} —Å —Ä–æ–ª—å—é ${newUserRole}`);
  
  // Notify the new user if possible
  try {
    bot.sendMessage(newUserId, `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${getUserName(userId)}.\n–í–∞—à–∞ —Ä–æ–ª—å: <b>${newUserRole}</b>\n\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.`, { parse_mode: 'HTML' })
      .catch(() => logMessage(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${newUserId} –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`));
  } catch (error) {
    logError(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${newUserId}: ${error.message}`);
  }
});

bot.onText(/\/removeuser (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const targetUserId = match[1];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/removeuser')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    return;
  }
  
  // Check if target user exists
  if (!users[targetUserId]) {
    bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  // Can't remove users with higher permission level
  if (getUserPermissionLevel(targetUserId) > getUserPermissionLevel(userId)) {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –≤—ã—à–µ –≤–∞—à–µ–π.');
    return;
  }
  
  // Can't remove yourself
  if (targetUserId === userId) {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.');
    return;
  }
  
  const userName = getUserName(targetUserId);
  const userRole = users[targetUserId].role;
  
  // Remove the user
  delete users[targetUserId];
  saveUsers();
  
  bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${targetUserId}, —Ä–æ–ª—å: ${userRole}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`);
  logMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId}`);
  
  // Notify the removed user
  try {
    bot.sendMessage(targetUserId, `‚ö†Ô∏è –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`)
      .catch(() => {});
  } catch (error) {}
});

bot.onText(/\/changerole (\d+) (\w+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const targetUserId = match[1];
  const newRole = match[2];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/changerole')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–µ–π.');
    return;
  }
  
  // Check if target user exists
  if (!users[targetUserId]) {
    bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  // Validate role
  if (!PERMISSIONS.hasOwnProperty(newRole)) {
    bot.sendMessage(chatId, `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: ${Object.keys(PERMISSIONS).join(', ')}`);
    return;
  }
  
  // Can't change users with higher permission level
  if (getUserPermissionLevel(targetUserId) > getUserPermissionLevel(userId)) {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –≤—ã—à–µ –≤–∞—à–µ–π.');
    return;
  }
  
  // Can't assign a role higher than your own
  if (PERMISSIONS[newRole] > getUserPermissionLevel(userId)) {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å –≤—ã—à–µ –≤–∞—à–µ–π.');
    return;
  }
  
  const userName = getUserName(targetUserId);
  const oldRole = users[targetUserId].role;
  
  // Change the role
  users[targetUserId].role = newRole;
  users[targetUserId].lastRoleChange = {
    date: new Date().toISOString(),
    changedBy: userId,
    previousRole: oldRole
  };
  
  saveUsers();
  
  bot.sendMessage(chatId, `‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName} (ID: ${targetUserId}) –∏–∑–º–µ–Ω–µ–Ω–∞ —Å ${oldRole} –Ω–∞ ${newRole}.`);
  logMessage(`User ${userId} –∏–∑–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId} –æ—Ç ${oldRole} –∫ ${newRole}`);
  
  // Notify the user about role change
  try {
    bot.sendMessage(targetUserId, `üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>\n\n–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å <b>${oldRole}</b> –Ω–∞ <b>${newRole}</b>.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.`, { parse_mode: 'HTML' })
      .catch(() => {});
  } catch (error) {}
});

bot.onText(/\/listusers/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/listusers')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    return;
  }
  
  // Generate user list grouped by role
  const usersByRole = {};
  
  Object.entries(users).forEach(([id, user]) => {
    if (!usersByRole[user.role]) {
      usersByRole[user.role] = [];
    }
    usersByRole[user.role].push({ id, name: user.name });
  });
  
  let userList = 'üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º:</b>\n\n';
  
  // Sort roles by permission level (highest first)
  const sortedRoles = Object.keys(usersByRole).sort((a, b) => PERMISSIONS[b] - PERMISSIONS[a]);
  
  sortedRoles.forEach(role => {
    const roleEmoji = role === 'owner' ? 'üëë' : 
                      role === 'tech.admin' ? '‚öôÔ∏è' : 
                      role === 'director' ? 'üî±' : 
                      role === 'admin' ? 'üõ°Ô∏è' : 
                      role === 'moderator' ? 'üîç' : 
                      role === 'premium' ? 'üíé' : 
                      role === 'user' ? 'üë§' : '‚ùì';
    
    userList += `${roleEmoji} <b>${role.toUpperCase()}</b> (${usersByRole[role].length}):\n`;
    
    usersByRole[role].forEach(user => {
      userList += `- ${user.name} (ID: ${user.id})\n`;
    });
    
    userList += '\n';
  });
  
  bot.sendMessage(chatId, userList, { parse_mode: 'HTML' });
});

// Broadcast message to all users
bot.onText(/\/broadcast (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const broadcastMessage = match[1];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/broadcast')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.');
    return;
  }
  
  const senderName = getUserName(userId);
  const formattedMessage = `üì¢ <b>–í–ê–ñ–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï</b>\n\n${broadcastMessage}\n\n<i>–û—Ç: ${senderName}</i>`;
  
  let sentCount = 0;
  let failedCount = 0;
  
  // Show "typing" status to indicate progress
  bot.sendChatAction(chatId, 'typing');
  
  // Send to all users
  const startTime = Date.now();
  const userIds = Object.keys(users);
  
  // Function to send messages sequentially to avoid hitting rate limits
  const sendMessages = async () => {
    for (const targetId of userIds) {
      try {
        if (targetId === userId) continue; // Skip sender
        
        await bot.sendMessage(targetId, formattedMessage, { parse_mode: 'HTML', disable_web_page_preview: true });
        sentCount++;
        stats.messagesSent++;
        
        // Small delay to avoid hitting rate limits
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        failedCount++;
        logError(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é ${targetId}: ${error.message}`);
      }
    }
    
    const timeTaken = ((Date.now() - startTime) / 1000).toFixed(1);
    
    bot.sendMessage(chatId, `‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n` +
      `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
      `- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n` +
      `- –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${failedCount}\n` +
      `- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${timeTaken} —Å–µ–∫—É–Ω–¥`,
      { parse_mode: 'HTML' });
    
    saveStats();
    logMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø—Ä–∞–≤–∏–ª —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (${failedCount} –Ω–µ—É—Å–ø–µ—à–Ω—ã–π)`);
  };
  
  sendMessages();
});

// Settings command
bot.onText(/\/settings/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/settings')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞.');
    return;
  }
  
  // Show current settings
  let settingsMessage = '‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:</b>\n\n';
  settingsMessage += `- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${settings.welcomeMessage}"\n`;
  settingsMessage += `- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notificationEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n`;
  settingsMessage += `- –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: ${settings.maintenanceMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n`;
  settingsMessage += `- –ú–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${settings.maxWarnings}\n`;
  settingsMessage += `- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: ${settings.muteDuration} —Å–µ–∫—É–Ω–¥\n`;
  settingsMessage += `- –Ø–∑—ã–∫: ${settings.language}\n`;
  settingsMessage += `- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${formatDate(settings.lastModified)}\n\n`;
  
  settingsMessage += `–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`;
  settingsMessage += `/set_welcome <—Ç–µ–∫—Å—Ç> - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
  settingsMessage += `/toggle_notifications - –í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n`;
  settingsMessage += `/toggle_maintenance - –í–∫–ª/–≤—ã–∫–ª —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n`;
  settingsMessage += `/set_max_warnings <—á–∏—Å–ª–æ> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å. –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n`;
  settingsMessage += `/set_mute_duration <—Å–µ–∫—É–Ω–¥—ã> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞\n`;
  settingsMessage += `/set_language <–∫–æ–¥> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ (ru, en)`;
  
  bot.sendMessage(chatId, settingsMessage, { parse_mode: 'HTML' });
});

// Settings modification commands
bot.onText(/\/set_welcome (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const newWelcome = match[1];
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/settings')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞.');
    return;
  }
  
  settings.welcomeMessage = newWelcome;
  saveSettings();
  
  bot.sendMessage(chatId, '‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.');
  logMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–∑–º–µ–Ω–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
});

bot.onText(/\/toggle_notifications/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/settings')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞.');
    return;
  }
  
  settings.notificationEnabled = !settings.notificationEnabled;
  saveSettings();
  
  bot.sendMessage(chatId, `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${settings.notificationEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}.`);
  logMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${settings.notificationEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'} notifications`);
});

bot.onText(/\/toggle_maintenance/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/settings')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞.');
    return;
  }
  
  settings.maintenanceMode = !settings.maintenanceMode;
  saveSettings();
  
  bot.sendMessage(chatId, `‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è ${settings.maintenanceMode ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}.`);
  logMessage(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${settings.maintenanceMode ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'} —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è`);
  
  // Notify all users about maintenance mode
  if (settings.maintenanceMode && settings.notificationEnabled) {
    Object.keys(users).forEach(targetId => {
      if (getUserPermissionLevel(targetId) < PERMISSIONS.admin) {
        bot.sendMessage(targetId, 'üõ† <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n–ë–æ—Ç –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.', { parse_mode: 'HTML' })
          .catch(() => {});
      }
    });
  }
});

// User ban/unban commands
bot.onText(/\/ban (\d+) (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const targetUserId = match[1];
  const reason = match[2];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/ban')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    return;
  }
  
  // Check if target user exists
  if (!users[targetUserId]) {
    bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  // Can't ban users with higher permission level
  if (getUserPermissionLevel(targetUserId) > getUserPermissionLevel(userId)) {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –≤—ã—à–µ –≤–∞—à–µ–π.');
    return;
  }
  
  // Can't ban yourself
  if (targetUserId === userId) {
    bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.');
    return;
  }
  
  const userName = getUserName(targetUserId);
  const prevRole = users[targetUserId].role;
  
  // Ban user by changing role to "blocked"
  users[targetUserId].role = 'blocked';
  users[targetUserId].bannedBy = {
    userId,
    date: new Date().toISOString(),
    reason,
    previousRole: prevRole
  };
  
  saveUsers();
  
  bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${targetUserId}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
  logMessage(`User ${userId} banned user ${targetUserId} for reason: ${reason}`);
  
  // Notify the banned user
  try {
    bot.sendMessage(targetUserId, `üö´ <b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.`, { parse_mode: 'HTML' })
      .catch(() => {});
  } catch (error) {}
});

bot.onText(/\/unban (\d+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const targetUserId = match[1];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/unban')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    return;
  }
  
  // Check if target user exists
  if (!users[targetUserId]) {
    bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  // Check if user is actually blocked
  if (users[targetUserId].role !== 'blocked') {
    bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.');
    return;
  }
  
  const userName = getUserName(targetUserId);
  const prevRole = users[targetUserId].bannedBy?.previousRole || 'user';
  
  // Unban user by restoring previous role
  users[targetUserId].role = prevRole;
  users[targetUserId].unbannedBy = {
    userId,
    date: new Date().toISOString()
  };
  
  saveUsers();
  
  bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userName} (ID: ${targetUserId}) —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é ${prevRole}.`);
  logMessage(`User ${userId} unbanned user ${targetUserId}`);
  
  // Notify the unbanned user
  try {
    bot.sendMessage(targetUserId, `üîì <b>–í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞</b>\n\n–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í–∞—à–∞ —Ä–æ–ª—å: ${prevRole}.\n\n–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`, { parse_mode: 'HTML' })
      .catch(() => {});
  } catch (error) {}
});

// Stats command
bot.onText(/\/stats/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/stats')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    return;
  }
  
  // Calculate uptime
  const startDate = new Date(stats.startDate);
  const currentDate = new Date();
  const uptimeDays = Math.floor((currentDate - startDate) / (1000 * 60 * 60 * 24));
  
  let statsMessage = 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n';
  statsMessage += `üìÜ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${formatDate(stats.startDate)}\n`;
  statsMessage += `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeDays} –¥–Ω–µ–π\n`;
  statsMessage += `üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${stats.commandsProcessed}\n`;
  statsMessage += `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsers}\n`;
  statsMessage += `üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.messagesSent}\n`;
  statsMessage += `‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${stats.errorCount}\n`;
  statsMessage += `üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å: ${formatDate(stats.lastReset)}\n\n`;
  
  // Count users by role
  const userCounts = {};
  Object.values(users).forEach(user => {
    userCounts[user.role] = (userCounts[user.role] || 0) + 1;
  });
  
  statsMessage += 'üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ä–æ–ª—è–º:</b>\n';
  
  Object.entries(userCounts)
    .sort((a, b) => PERMISSIONS[b[0]] - PERMISSIONS[a[0]])
    .forEach(([role, count]) => {
      statsMessage += `- ${role}: ${count}\n`;
    });
  
  bot.sendMessage(chatId, statsMessage, { parse_mode: 'HTML' });
});

// Backup command
bot.onText(/\/backup/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/backup')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.');
    return;
  }
  
  // Create backup
  const backupFile = createBackup();
  
  if (backupFile) {
    const backupName = path.basename(backupFile);
    bot.sendMessage(chatId, `‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ${backupName}`);
    logMessage(`User ${userId} created backup ${backupName}`);
  } else {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.');
  }
});

// View logs command
bot.onText(/\/logs(?:\s+(\d+))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const lines = match[1] ? parseInt(match[1]) : 20; // Default to 20 lines
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/logs')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.');
    return;
  }
  
  // Check if log file exists
  if (!fs.existsSync(CONFIG.logFile)) {
    bot.sendMessage(chatId, '‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  try {
    // Read the last N lines of the log file
    const data = fs.readFileSync(CONFIG.logFile, 'utf8');
    const logLines = data.split('\n').filter(line => line.trim() !== '');
    const lastLogs = logLines.slice(-Math.min(lines, 100)); // Get up to the requested lines, max 100
    
    let logMessage = `üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${lastLogs.length} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞:</b>\n\n`;
    
    lastLogs.forEach(line => {
      // Format log entries for better readability
      const match = line.match(/\[(.+?)\] (INFO|ERROR): (.+)/);
      
      if (match) {
        const timestamp = match[1];
        const logType = match[2];
        const message = match[3];
        
        const formattedTime = timestamp.split('T')[1].split('.')[0]; // Extract just the time
        const emoji = logType === 'ERROR' ? 'üî¥' : 'üîµ';
        
        logMessage += `${emoji} <code>${formattedTime}</code>: ${message}\n`;
      } else {
        logMessage += `${line}\n`;
      }
    });
    
    bot.sendMessage(chatId, logMessage, { parse_mode: 'HTML' });
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: ${error.message}`);
    logError(`Failed to read logs: ${error.message}`);
  }
});

// Schedule command execution
bot.onText(/\/schedule ([^\s]+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const timeString = match[1];
  const command = match[2];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/schedule')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.');
    return;
  }
  
  // Parse time (accept time in formats like "12:30", "tomorrow 15:00", "2h30m")
  let scheduledTime;
  
  try {
    if (timeString.match(/^\d{1,2}:\d{2}$/)) {
      // Time format HH:MM for today
      const [hours, minutes] = timeString.split(':').map(Number);
      scheduledTime = new Date();
      scheduledTime.setHours(hours, minutes, 0, 0);
      
      // If time is in the past, schedule for tomorrow
      if (scheduledTime < new Date()) {
        scheduledTime.setDate(scheduledTime.getDate() + 1);
      }
    } else if (timeString.toLowerCase().startsWith('tomorrow')) {
      // Tomorrow at specific time
      const timeMatch = timeString.match(/tomorrow\s+(\d{1,2}):(\d{2})/i);
      if (timeMatch) {
        const hours = parseInt(timeMatch[1]);
        const minutes = parseInt(timeMatch[2]);
        
        scheduledTime = new Date();
        scheduledTime.setDate(scheduledTime.getDate() + 1);
        scheduledTime.setHours(hours, minutes, 0, 0);
      } else {
        throw new Error('Invalid time format for "tomorrow"');
      }
    } else if (timeString.match(/^(\d+)h(?:(\d+)m)?$/)) {
      // Relative time like "2h30m"
      const match = timeString.match(/^(\d+)h(?:(\d+)m)?$/);
      const hours = parseInt(match[1]);
      const minutes = match[2] ? parseInt(match[2]) : 0;
      
      scheduledTime = new Date();
      scheduledTime.setTime(scheduledTime.getTime() + hours * 60 * 60 * 1000 + minutes * 60 * 1000);
    } else {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
    }
    
    // Ensure time is in the future
    if (scheduledTime <= new Date()) {
      throw new Error('–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
    }
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: ${error.message}`);
    return;
  }
  
  // Generate a unique ID for the job
  const jobId = `job_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
  
  // Schedule the job
  try {
    const job = schedule.scheduleJob(scheduledTime, async function() {
      try {
        // Execute command as if it was sent by the scheduler
        logMessage(`Executing scheduled command: ${command} (scheduled by user ${userId})`);
        
        // Send command to chat (simulating user input)
        // Need to use appropriate handler based on command type
        if (command.startsWith('/test ')) {
          const text = command.substring(6);
          const userName = getUserName(userId);
          const userRole = getUserRole(userId);
          
          // Format message based on user role with scheduled tag
          const roleEmoji = 
            userRole === 'owner' ? 'üëë' : 
            userRole === 'tech.admin' ? '‚öôÔ∏è' : 
            userRole === 'director' ? 'üî±' : 
            userRole === 'admin' ? 'üõ°Ô∏è' : 'üì¢';
          
          const formattedMessage = `${roleEmoji} <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userRole}</b> ${userName}\n\n${text}\n\n<i>(–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${formatDate(scheduledTime)})</i>`;
          
          // Send to the group
          await bot.sendMessage(CONFIG.groupChatId, formattedMessage, { parse_mode: 'HTML' });
          bot.sendMessage(userId, `‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.`);
          stats.messagesSent++;
          saveStats();
        } else if (command.startsWith('/announce ')) {
          const announcement = command.substring(10);
          const userName = getUserName(userId);
          
          const announcementMessage = `üì£ <b>–ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï</b> üì£\n\n${announcement}\n\n<i>–û—Ç: ${userName} (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${formatDate(scheduledTime)})</i>`;
          
          // Send to the group
          await bot.sendMessage(CONFIG.groupChatId, announcementMessage, { parse_mode: 'HTML' });
          bot.sendMessage(userId, `‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!`);
          stats.messagesSent++;
          saveStats();
        } else if (command.startsWith('/broadcast ')) {
          const broadcastMessage = command.substring(11);
          const senderName = getUserName(userId);
          const formattedMessage = `üì¢ <b>–ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–û–ï –í–ê–ñ–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï</b>\n\n${broadcastMessage}\n\n<i>–û—Ç: ${senderName} (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${formatDate(scheduledTime)})</i>`;
          
          let sentCount = 0;
          let failedCount = 0;
          
          // Send to all users
          for (const targetId of Object.keys(users)) {
            try {
              await bot.sendMessage(targetId, formattedMessage, { parse_mode: 'HTML' });
              sentCount++;
              stats.messagesSent++;
              
              // Small delay to avoid hitting rate limits
              await new Promise(resolve => setTimeout(resolve, 50));
            } catch (error) {
              failedCount++;
              logError(`Failed to send scheduled broadcast to ${targetId}: ${error.message}`);
            }
          }
          
          bot.sendMessage(userId, `‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: ${sentCount}, –æ—à–∏–±–æ–∫: ${failedCount}`);
          saveStats();
        } else {
          bot.sendMessage(userId, `‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${command}`);
        }
        
        // Remove from scheduled tasks
        delete scheduledTasks[jobId];
      } catch (error) {
        logError(`Error executing scheduled job ${jobId}: ${error.message}`);
        try {
          bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: ${error.message}`);
        } catch (e) {
          logError(`Could not notify user about scheduled job failure: ${e.message}`);
        }
      }
    });
    
    // Store the job
    scheduledTasks[jobId] = {
      job,
      userId,
      command,
      scheduledTime: scheduledTime.toISOString(),
      createdAt: new Date().toISOString()
    };
    
    // Respond to user
    const formattedDate = formatDate(scheduledTime);
    bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${formattedDate}.\nID –∑–∞–¥–∞–Ω–∏—è: ${jobId}\n\n–ö–æ–º–∞–Ω–¥–∞: ${command}`);
    logMessage(`User ${userId} scheduled command "${command}" for ${formattedDate} (ID: ${jobId})`);
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    logError(`Failed to schedule task: ${error.message}`);
  }
});

// Cancel scheduled task
bot.onText(/\/cancel_schedule (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const jobId = match[1];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission
  if (!canExecuteCommand(userId, '/cancel_schedule')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
    return;
  }
  
  // Check if job exists
  if (!scheduledTasks[jobId]) {
    bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    return;
  }
  
  // Check if user is the owner of the job or has higher permission
  const jobOwnerId = scheduledTasks[jobId].userId;
  if (jobOwnerId !== userId && getUserPermissionLevel(userId) < getUserPermissionLevel(jobOwnerId)) {
    bot.sendMessage(chatId, '‚ùå –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–π —Ä–æ–ª—å—é.');
    return;
  }
  
  // Cancel the job
  try {
    scheduledTasks[jobId].job.cancel();
    const commandText = scheduledTasks[jobId].command;
    const scheduledTime = formatDate(scheduledTasks[jobId].scheduledTime);
    
    delete scheduledTasks[jobId];
    
    bot.sendMessage(chatId, `‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\nID: ${jobId}\n–í—Ä–µ–º—è: ${scheduledTime}\n–ö–æ–º–∞–Ω–¥–∞: ${commandText}`);
    logMessage(`User ${userId} cancelled scheduled task ${jobId}`);
  } catch (error) {
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    logError(`Failed to cancel scheduled task ${jobId}: ${error.message}`);
  }
});

// List scheduled tasks
bot.onText(/\/list_scheduled/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has permission (same as for scheduling)
  if (!canExecuteCommand(userId, '/schedule')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
    return;
  }
  
  // Check if there are any scheduled tasks
  const tasks = Object.entries(scheduledTasks);
  if (tasks.length === 0) {
    bot.sendMessage(chatId, 'üìÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
    return;
  }
  
  // Filter tasks based on user permissions
  const userPermissionLevel = getUserPermissionLevel(userId);
  const filteredTasks = tasks.filter(([_, task]) => {
    // Show all tasks for admins and above, only own tasks for others
    return userId === task.userId || userPermissionLevel >= PERMISSIONS.admin;
  });
  
  if (filteredTasks.length === 0) {
    bot.sendMessage(chatId, 'üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.');
    return;
  }
  
  // Sort tasks by scheduled time
  filteredTasks.sort((a, b) => new Date(a[1].scheduledTime) - new Date(b[1].scheduledTime));
  
  // Generate message
  let message = 'üìÖ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n';
  
  filteredTasks.forEach(([id, task]) => {
    const scheduledTime = formatDate(task.scheduledTime);
    const shortCommand = task.command.length > 30 ? task.command.substring(0, 30) + '...' : task.command;
    const taskOwner = getUserName(task.userId);
    
    message += `üîπ <b>ID:</b> ${id}\n`;
    message += `üìÜ <b>–í—Ä–µ–º—è:</b> ${scheduledTime}\n`;
    message += `üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> ${taskOwner}\n`;
    message += `üî§ <b>–ö–æ–º–∞–Ω–¥–∞:</b> ${shortCommand}\n\n`;
  });
  
  message += `–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/cancel_schedule <ID –∑–∞–¥–∞–Ω–∏—è>`;
  
  bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// Premium features
bot.onText(/\/premium/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has premium permission
  if (!canExecuteCommand(userId, '/premium')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-—Ä–æ–ª–∏.');
    return;
  }
  
  // Show premium features
let message = 'üíé <b>–ü–†–ï–ú–ò–£–ú –§–£–ù–ö–¶–ò–ò</b> üíé\n\n';
message += '‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–º–∏—É–º –∫–æ–º–∞–Ω–¥—ã:</b>\n';
message += '‚Ä¢ /customstatus <i>–≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å</i> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å\n';
message += '‚Ä¢ /poll <i>–≤–æ–ø—Ä–æ—Å</i> | <i>–≤–∞—Ä–∏–∞–Ω—Ç1</i> | <i>–≤–∞—Ä–∏–∞–Ω—Ç2</i> ... - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ\n';
message += '‚Ä¢ /meme <i>–≤–∞—à —Ç–µ–∫—Å—Ç</i> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–º–∞ —Å –≤–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º\n';
message += '‚Ä¢ /weather <i>–≥–æ—Ä–æ–¥</i> - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É (—Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º)\n\n';

message += 'üí´ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n';
message += '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n';
message += '‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º\n';
message += '‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ\n';
message += '‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤\n';

bot.sendMessage(chatId, message, { parse_mode: 'HTML' });

});

// Custom status for premium users
bot.onText(/\/customstatus (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const statusText = match[1];
  
  // Update stats
  stats.commandsProcessed++;
  saveStats();
  
  // Check if user has premium permission
  if (!canExecuteCommand(userId, '/premium')) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-—Ä–æ–ª–∏.');
    return;
  }
  
// Validate status length
if (statusText.length > 50) {
    bot.sendMessage(chatId, '‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 50 —Å–∏–º–≤–æ–ª–æ–≤.');
    return;
  }
  
  // Save user status
  userStatuses[userId] = statusText;
  saveUserData();
  
  // Confirm status update
  bot.sendMessage(chatId, `‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: "${statusText}"`);
  logMessage(`User ${userId} set custom status: ${statusText}`);
});